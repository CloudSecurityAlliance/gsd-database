{
    "GSD": {
        "alias": "CVE-2020-26243",
        "description": "Nanopb is a small code-size Protocol Buffers implementation. In Nanopb before versions 0.4.4 and 0.3.9.7, decoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed. This is fixed in versions 0.3.9.7 and 0.4.4. The following workarounds are available: 1) Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code. 2) Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed. 3) Use an arena allocator for nanopb, to make sure all memory can be released afterwards.",
        "id": "GSD-2020-26243",
        "references": [
            "https://www.suse.com/security/cve/CVE-2020-26243.html"
        ]
    },
    "namespaces": {
        "cve.org": {
            "CVE_data_meta": {
                "ASSIGNER": "security-advisories@github.com",
                "ID": "CVE-2020-26243",
                "STATE": "PUBLIC",
                "TITLE": "Memory leak in nanopb"
            },
            "affects": {
                "vendor": {
                    "vendor_data": [
                        {
                            "product": {
                                "product_data": [
                                    {
                                        "product_name": "nanopb",
                                        "version": {
                                            "version_data": [
                                                {
                                                    "version_value": "< 0.3.9.7"
                                                },
                                                {
                                                    "version_value": ">= 0.4.0, < 0.4.4"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "vendor_name": "nanopb"
                        }
                    ]
                }
            },
            "data_format": "MITRE",
            "data_type": "CVE",
            "data_version": "4.0",
            "description": {
                "description_data": [
                    {
                        "lang": "eng",
                        "value": "Nanopb is a small code-size Protocol Buffers implementation. In Nanopb before versions 0.4.4 and 0.3.9.7, decoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed. This is fixed in versions 0.3.9.7 and 0.4.4. The following workarounds are available: 1) Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code. 2) Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed. 3) Use an arena allocator for nanopb, to make sure all memory can be released afterwards."
                    }
                ]
            },
            "impact": {
                "cvss": {
                    "attackComplexity": "LOW",
                    "attackVector": "NETWORK",
                    "availabilityImpact": "HIGH",
                    "baseScore": 7.5,
                    "baseSeverity": "HIGH",
                    "confidentialityImpact": "NONE",
                    "integrityImpact": "NONE",
                    "privilegesRequired": "NONE",
                    "scope": "UNCHANGED",
                    "userInteraction": "NONE",
                    "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "version": "3.1"
                }
            },
            "problemtype": {
                "problemtype_data": [
                    {
                        "description": [
                            {
                                "lang": "eng",
                                "value": "CWE-20: Improper Input Validation"
                            }
                        ]
                    },
                    {
                        "description": [
                            {
                                "lang": "eng",
                                "value": "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
                            }
                        ]
                    }
                ]
            },
            "references": {
                "reference_data": [
                    {
                        "name": "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh",
                        "refsource": "CONFIRM",
                        "url": "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh"
                    },
                    {
                        "name": "https://github.com/nanopb/nanopb/issues/615",
                        "refsource": "MISC",
                        "url": "https://github.com/nanopb/nanopb/issues/615"
                    },
                    {
                        "name": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
                        "refsource": "MISC",
                        "url": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c"
                    },
                    {
                        "name": "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt",
                        "refsource": "MISC",
                        "url": "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt"
                    }
                ]
            },
            "source": {
                "advisory": "GHSA-85rr-4rh9-hhwh",
                "discovery": "UNKNOWN"
            }
        },
        "gitlab.com": {
            "advisories": [
                {
                    "affected_range": ">=0.3.2,<=0.3.9.6||>=0.4.0,<0.4.4",
                    "affected_versions": "All versions starting from 0.3.2 up to 0.3.9.6, all versions starting from 0.4.0 before 0.4.4",
                    "cvss_v2": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
                    "cvss_v3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "cwe_ids": [
                        "CWE-1035",
                        "CWE-119",
                        "CWE-20",
                        "CWE-78",
                        "CWE-937"
                    ],
                    "date": "2021-01-07",
                    "description": "Nanopb is a small code-size Protocol Buffers implementation. The following workarounds are available: 1) Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code. 2) Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed. 3) Use an arena allocator for nanopb, to make sure all memory can be released afterwards.",
                    "fixed_versions": [
                        "0.3.9.7",
                        "0.4.4"
                    ],
                    "identifier": "CVE-2020-26243",
                    "identifiers": [
                        "GHSA-85rr-4rh9-hhwh",
                        "CVE-2020-26243"
                    ],
                    "not_impacted": "All versions before 0.3.2, all versions after 0.3.9.6 before 0.4.0, all versions starting from 0.4.4",
                    "package_slug": "pypi/nanopb",
                    "pubdate": "2020-11-25",
                    "solution": "Upgrade to versions 0.3.9.7, 0.4.4 or above.",
                    "title": "Improper Input Validation",
                    "urls": [
                        "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh",
                        "https://github.com/nanopb/nanopb/issues/615",
                        "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
                        "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt",
                        "https://nvd.nist.gov/vuln/detail/CVE-2020-26243",
                        "https://github.com/advisories/GHSA-85rr-4rh9-hhwh"
                    ],
                    "uuid": "865355e8-5f8e-4cc8-9a11-68d167597129"
                }
            ]
        },
        "nvd.nist.gov": {
            "configurations": {
                "CVE_data_version": "4.0",
                "nodes": [
                    {
                        "children": [],
                        "cpe_match": [
                            {
                                "cpe23Uri": "cpe:2.3:a:nanopb_project:nanopb:*:*:*:*:*:*:*:*",
                                "cpe_name": [],
                                "versionEndExcluding": "0.3.9.7",
                                "vulnerable": true
                            },
                            {
                                "cpe23Uri": "cpe:2.3:a:nanopb_project:nanopb:*:*:*:*:*:*:*:*",
                                "cpe_name": [],
                                "versionEndExcluding": "0.4.4",
                                "versionStartIncluding": "0.4.0",
                                "vulnerable": true
                            }
                        ],
                        "operator": "OR"
                    }
                ]
            },
            "cve": {
                "CVE_data_meta": {
                    "ASSIGNER": "security-advisories@github.com",
                    "ID": "CVE-2020-26243"
                },
                "data_format": "MITRE",
                "data_type": "CVE",
                "data_version": "4.0",
                "description": {
                    "description_data": [
                        {
                            "lang": "en",
                            "value": "Nanopb is a small code-size Protocol Buffers implementation. In Nanopb before versions 0.4.4 and 0.3.9.7, decoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed. This is fixed in versions 0.3.9.7 and 0.4.4. The following workarounds are available: 1) Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code. 2) Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed. 3) Use an arena allocator for nanopb, to make sure all memory can be released afterwards."
                        }
                    ]
                },
                "problemtype": {
                    "problemtype_data": [
                        {
                            "description": [
                                {
                                    "lang": "en",
                                    "value": "CWE-119"
                                },
                                {
                                    "lang": "en",
                                    "value": "CWE-20"
                                }
                            ]
                        }
                    ]
                },
                "references": {
                    "reference_data": [
                        {
                            "name": "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh",
                            "refsource": "CONFIRM",
                            "tags": [
                                "Third Party Advisory"
                            ],
                            "url": "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh"
                        },
                        {
                            "name": "https://github.com/nanopb/nanopb/issues/615",
                            "refsource": "MISC",
                            "tags": [
                                "Exploit",
                                "Patch",
                                "Third Party Advisory"
                            ],
                            "url": "https://github.com/nanopb/nanopb/issues/615"
                        },
                        {
                            "name": "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt",
                            "refsource": "MISC",
                            "tags": [
                                "Release Notes",
                                "Third Party Advisory"
                            ],
                            "url": "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt"
                        },
                        {
                            "name": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
                            "refsource": "MISC",
                            "tags": [
                                "Patch",
                                "Third Party Advisory"
                            ],
                            "url": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c"
                        }
                    ]
                }
            },
            "impact": {
                "baseMetricV2": {
                    "acInsufInfo": false,
                    "cvssV2": {
                        "accessComplexity": "MEDIUM",
                        "accessVector": "NETWORK",
                        "authentication": "NONE",
                        "availabilityImpact": "PARTIAL",
                        "baseScore": 4.3,
                        "confidentialityImpact": "NONE",
                        "integrityImpact": "NONE",
                        "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
                        "version": "2.0"
                    },
                    "exploitabilityScore": 8.6,
                    "impactScore": 2.9,
                    "obtainAllPrivilege": false,
                    "obtainOtherPrivilege": false,
                    "obtainUserPrivilege": false,
                    "severity": "MEDIUM",
                    "userInteractionRequired": false
                },
                "baseMetricV3": {
                    "cvssV3": {
                        "attackComplexity": "LOW",
                        "attackVector": "NETWORK",
                        "availabilityImpact": "HIGH",
                        "baseScore": 7.5,
                        "baseSeverity": "HIGH",
                        "confidentialityImpact": "NONE",
                        "integrityImpact": "NONE",
                        "privilegesRequired": "NONE",
                        "scope": "UNCHANGED",
                        "userInteraction": "NONE",
                        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                        "version": "3.1"
                    },
                    "exploitabilityScore": 3.9,
                    "impactScore": 3.6
                }
            },
            "lastModifiedDate": "2020-12-07T20:49Z",
            "publishedDate": "2020-11-25T17:15Z"
        }
    }
}