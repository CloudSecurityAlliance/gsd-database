{
  "gsd": {
    "metadata": {
      "exploitCode": "unknown",
      "remediation": "unknown",
      "reportConfidence": "confirmed",
      "type": "vulnerability"
    },
    "osvSchema": {
      "aliases": [
        "CVE-2024-24576"
      ],
      "details": "Rust is a programming language. The Rust Security Response WG was notified that the Rust standard library prior to version 1.77.2 did not properly escape arguments when invoking batch files (with the `bat` and `cmd` extensions) on Windows using the `Command`. An attacker able to control the arguments passed to the spawned process could execute arbitrary shell commands by bypassing the escaping. The severity of this vulnerability is critical for those who invoke batch files on Windows with untrusted arguments. No other platform or use is affected.\n\nThe `Command::arg` and `Command::args` APIs state in their documentation that the arguments will be passed to the spawned process as-is, regardless of the content of the arguments, and will not be evaluated by a shell. This means it should be safe to pass untrusted input as an argument.\n\nOn Windows, the implementation of this is more complex than other platforms, because the Windows API only provides a single string containing all the arguments to the spawned process, and it's up to the spawned process to split them. Most programs use the standard C run-time argv, which in practice results in a mostly consistent way arguments are splitted.\n\nOne exception though is `cmd.exe` (used among other things to execute batch files), which has its own argument splitting logic. That forces the standard library to implement custom escaping for arguments passed to batch files. Unfortunately it was reported that our escaping logic was not thorough enough, and it was possible to pass malicious arguments that would result in arbitrary shell execution.\n\nDue to the complexity of `cmd.exe`, we didn't identify a solution that would correctly escape arguments in all cases. To maintain our API guarantees, we improved the robustness of the escaping code, and changed the `Command` API to return an [`InvalidInput`][4] error when it cannot safely escape an argument. This error will be emitted when spawning the process.\n\nThe fix is included in Rust 1.77.2. Note that the new escaping logic for batch files errs on the conservative side, and could reject valid arguments. Those who implement the escaping themselves or only handle trusted inputs on Windows can also use the `CommandExt::raw_arg` method to bypass the standard library's escaping logic. ",
      "id": "GSD-2024-24576",
      "modified": "2024-01-26T06:02:26.028983Z",
      "schema_version": "1.4.0"
    }
  },
  "namespaces": {
    "cve.org": {
      "CVE_data_meta": {
        "ASSIGNER": "security-advisories@github.com",
        "ID": "CVE-2024-24576",
        "STATE": "PUBLIC"
      },
      "affects": {
        "vendor": {
          "vendor_data": [
            {
              "product": {
                "product_data": [
                  {
                    "product_name": "rust",
                    "version": {
                      "version_data": [
                        {
                          "version_affected": "=",
                          "version_value": "< 1.77.2"
                        }
                      ]
                    }
                  }
                ]
              },
              "vendor_name": "rust-lang"
            }
          ]
        }
      },
      "data_format": "MITRE",
      "data_type": "CVE",
      "data_version": "4.0",
      "description": {
        "description_data": [
          {
            "lang": "eng",
            "value": "Rust is a programming language. The Rust Security Response WG was notified that the Rust standard library prior to version 1.77.2 did not properly escape arguments when invoking batch files (with the `bat` and `cmd` extensions) on Windows using the `Command`. An attacker able to control the arguments passed to the spawned process could execute arbitrary shell commands by bypassing the escaping. The severity of this vulnerability is critical for those who invoke batch files on Windows with untrusted arguments. No other platform or use is affected.\n\nThe `Command::arg` and `Command::args` APIs state in their documentation that the arguments will be passed to the spawned process as-is, regardless of the content of the arguments, and will not be evaluated by a shell. This means it should be safe to pass untrusted input as an argument.\n\nOn Windows, the implementation of this is more complex than other platforms, because the Windows API only provides a single string containing all the arguments to the spawned process, and it's up to the spawned process to split them. Most programs use the standard C run-time argv, which in practice results in a mostly consistent way arguments are splitted.\n\nOne exception though is `cmd.exe` (used among other things to execute batch files), which has its own argument splitting logic. That forces the standard library to implement custom escaping for arguments passed to batch files. Unfortunately it was reported that our escaping logic was not thorough enough, and it was possible to pass malicious arguments that would result in arbitrary shell execution.\n\nDue to the complexity of `cmd.exe`, we didn't identify a solution that would correctly escape arguments in all cases. To maintain our API guarantees, we improved the robustness of the escaping code, and changed the `Command` API to return an `InvalidInput` error when it cannot safely escape an argument. This error will be emitted when spawning the process.\n\nThe fix is included in Rust 1.77.2. Note that the new escaping logic for batch files errs on the conservative side, and could reject valid arguments. Those who implement the escaping themselves or only handle trusted inputs on Windows can also use the `CommandExt::raw_arg` method to bypass the standard library's escaping logic. "
          }
        ]
      },
      "impact": {
        "cvss": [
          {
            "attackComplexity": "LOW",
            "attackVector": "NETWORK",
            "availabilityImpact": "HIGH",
            "baseScore": 10,
            "baseSeverity": "CRITICAL",
            "confidentialityImpact": "HIGH",
            "integrityImpact": "HIGH",
            "privilegesRequired": "NONE",
            "scope": "CHANGED",
            "userInteraction": "NONE",
            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
            "version": "3.1"
          }
        ]
      },
      "problemtype": {
        "problemtype_data": [
          {
            "description": [
              {
                "cweId": "CWE-78",
                "lang": "eng",
                "value": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
              }
            ]
          },
          {
            "description": [
              {
                "cweId": "CWE-88",
                "lang": "eng",
                "value": "CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')"
              }
            ]
          }
        ]
      },
      "references": {
        "reference_data": [
          {
            "name": "https://github.com/rust-lang/rust/security/advisories/GHSA-q455-m56c-85mh",
            "refsource": "MISC",
            "url": "https://github.com/rust-lang/rust/security/advisories/GHSA-q455-m56c-85mh"
          },
          {
            "name": "https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.InvalidInput",
            "refsource": "MISC",
            "url": "https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.InvalidInput"
          },
          {
            "name": "https://doc.rust-lang.org/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg",
            "refsource": "MISC",
            "url": "https://doc.rust-lang.org/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg"
          },
          {
            "name": "https://doc.rust-lang.org/std/process/struct.Command.html",
            "refsource": "MISC",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html"
          },
          {
            "name": "https://doc.rust-lang.org/std/process/struct.Command.html#method.arg",
            "refsource": "MISC",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.arg"
          },
          {
            "name": "https://doc.rust-lang.org/std/process/struct.Command.html#method.args",
            "refsource": "MISC",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.args"
          },
          {
            "name": "https://github.com/rust-lang/rust/issues",
            "refsource": "MISC",
            "url": "https://github.com/rust-lang/rust/issues"
          },
          {
            "name": "https://www.rust-lang.org/policies/security",
            "refsource": "MISC",
            "url": "https://www.rust-lang.org/policies/security"
          },
          {
            "name": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W7WRFOIAZXYUPGXGR5UEEW7VTTOD4SZ3/",
            "refsource": "MISC",
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W7WRFOIAZXYUPGXGR5UEEW7VTTOD4SZ3/"
          }
        ]
      },
      "source": {
        "advisory": "GHSA-q455-m56c-85mh",
        "discovery": "UNKNOWN"
      }
    },
    "nvd.nist.gov": {
      "cve": {
        "descriptions": [
          {
            "lang": "en",
            "value": "Rust is a programming language. The Rust Security Response WG was notified that the Rust standard library prior to version 1.77.2 did not properly escape arguments when invoking batch files (with the `bat` and `cmd` extensions) on Windows using the `Command`. An attacker able to control the arguments passed to the spawned process could execute arbitrary shell commands by bypassing the escaping. The severity of this vulnerability is critical for those who invoke batch files on Windows with untrusted arguments. No other platform or use is affected.\n\nThe `Command::arg` and `Command::args` APIs state in their documentation that the arguments will be passed to the spawned process as-is, regardless of the content of the arguments, and will not be evaluated by a shell. This means it should be safe to pass untrusted input as an argument.\n\nOn Windows, the implementation of this is more complex than other platforms, because the Windows API only provides a single string containing all the arguments to the spawned process, and it's up to the spawned process to split them. Most programs use the standard C run-time argv, which in practice results in a mostly consistent way arguments are splitted.\n\nOne exception though is `cmd.exe` (used among other things to execute batch files), which has its own argument splitting logic. That forces the standard library to implement custom escaping for arguments passed to batch files. Unfortunately it was reported that our escaping logic was not thorough enough, and it was possible to pass malicious arguments that would result in arbitrary shell execution.\n\nDue to the complexity of `cmd.exe`, we didn't identify a solution that would correctly escape arguments in all cases. To maintain our API guarantees, we improved the robustness of the escaping code, and changed the `Command` API to return an `InvalidInput` error when it cannot safely escape an argument. This error will be emitted when spawning the process.\n\nThe fix is included in Rust 1.77.2. Note that the new escaping logic for batch files errs on the conservative side, and could reject valid arguments. Those who implement the escaping themselves or only handle trusted inputs on Windows can also use the `CommandExt::raw_arg` method to bypass the standard library's escaping logic. "
          },
          {
            "lang": "es",
            "value": "Rust es un lenguaje de programaci\u00f3n. Se notific\u00f3 al Grupo de Trabajo de Respuesta de Seguridad de Rust que la librer\u00eda est\u00e1ndar de Rust anterior a la versi\u00f3n 1.77.2 no escapaba correctamente a los argumentos al invocar archivos por lotes (con las extensiones `bat` y `cmd`) en Windows usando el `Comando`. Un atacante capaz de controlar los argumentos pasados al proceso generado podr\u00eda ejecutar comandos de shell arbitrarios evitando el escape. La gravedad de esta vulnerabilidad es cr\u00edtica para quienes invocan archivos por lotes en Windows con argumentos que no son de confianza. Ninguna otra plataforma o uso se ve afectado. Las API `Command::arg` y `Command::args` establecen en su documentaci\u00f3n que los argumentos se pasar\u00e1n al proceso generado tal cual, independientemente del contenido de los argumentos, y no ser\u00e1n evaluados por un shell. Esto significa que deber\u00eda ser seguro pasar entradas que no sean de confianza como argumento. En Windows, la implementaci\u00f3n de esto es m\u00e1s compleja que en otras plataformas, porque la API de Windows solo proporciona una \u00fanica cadena que contiene todos los argumentos del proceso generado, y depende del proceso generado dividirlos. La mayor\u00eda de los programas utilizan el argv est\u00e1ndar en tiempo de ejecuci\u00f3n de C, que en la pr\u00e1ctica da como resultado una forma mayoritariamente consistente de dividir los argumentos. Sin embargo, una excepci\u00f3n es `cmd.exe` (utilizado, entre otras cosas, para ejecutar archivos por lotes), que tiene su propia l\u00f3gica de divisi\u00f3n de argumentos. Eso obliga a la librer\u00eda est\u00e1ndar a implementar un escape personalizado para los argumentos pasados a archivos por lotes. Desafortunadamente, se inform\u00f3 que nuestra l\u00f3gica de escape no era lo suficientemente exhaustiva y era posible pasar argumentos maliciosos que dar\u00edan como resultado una ejecuci\u00f3n arbitraria del shell. Debido a la complejidad de `cmd.exe`, no identificamos una soluci\u00f3n que escapara correctamente de los argumentos en todos los casos. Para mantener nuestras garant\u00edas de API, mejoramos la solidez del c\u00f3digo de escape y cambiamos la API `Command` para que devuelva un error [`InvalidInput`][4] cuando no puede escapar de forma segura de un argumento. Este error se emitir\u00e1 al generar el proceso. La soluci\u00f3n est\u00e1 incluida en Rust 1.77.2. Tenga en cuenta que la nueva l\u00f3gica de escape para archivos por lotes es conservadora y podr\u00eda rechazar argumentos v\u00e1lidos. Aquellos que implementan el escape ellos mismos o solo manejan entradas confiables en Windows tambi\u00e9n pueden usar el m\u00e9todo `CommandExt::raw_arg` para evitar la l\u00f3gica de escape de la librer\u00eda est\u00e1ndar."
          }
        ],
        "id": "CVE-2024-24576",
        "lastModified": "2024-04-12T02:15:06.347",
        "metrics": {
          "cvssMetricV31": [
            {
              "cvssData": {
                "attackComplexity": "LOW",
                "attackVector": "NETWORK",
                "availabilityImpact": "HIGH",
                "baseScore": 10.0,
                "baseSeverity": "CRITICAL",
                "confidentialityImpact": "HIGH",
                "integrityImpact": "HIGH",
                "privilegesRequired": "NONE",
                "scope": "CHANGED",
                "userInteraction": "NONE",
                "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
                "version": "3.1"
              },
              "exploitabilityScore": 3.9,
              "impactScore": 6.0,
              "source": "security-advisories@github.com",
              "type": "Secondary"
            }
          ]
        },
        "published": "2024-04-09T18:15:08.420",
        "references": [
          {
            "source": "security-advisories@github.com",
            "url": "https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.InvalidInput"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://doc.rust-lang.org/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.arg"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.args"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://github.com/rust-lang/rust/issues"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://github.com/rust-lang/rust/security/advisories/GHSA-q455-m56c-85mh"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W7WRFOIAZXYUPGXGR5UEEW7VTTOD4SZ3/"
          },
          {
            "source": "security-advisories@github.com",
            "url": "https://www.rust-lang.org/policies/security"
          }
        ],
        "sourceIdentifier": "security-advisories@github.com",
        "vulnStatus": "Awaiting Analysis",
        "weaknesses": [
          {
            "description": [
              {
                "lang": "en",
                "value": "CWE-78"
              },
              {
                "lang": "en",
                "value": "CWE-88"
              }
            ],
            "source": "security-advisories@github.com",
            "type": "Secondary"
          }
        ]
      }
    }
  }
}